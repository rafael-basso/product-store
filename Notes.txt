Usar um subsystem para rodar uma distro linux (tem na microsoft store) caso seja windows. Neste caso, usar o prompt dentro do VS Code pelo WSL ou bash (apos clonar projeto, dar npm i para instalar)

instalar o nvm (node version manager): curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

seguir os passos: https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/

nvm -v
nvm ls-remote
nvm install v18.16.0
node -v // para ver se o node esta na mesma versao

npx -p @angular/cli@17 ng new product-store --skip-tests
Y
stylesheet? Sass SCSS - Y
Server side? N

teminal: code <nome do projeto> para abrir no code, run npm start para iniciar o projeto

1- instalar Angular Material (material para componetizacao)
npx ng add @angular/material
2- criar componentes: posso deixar o server running em um terminal e rodar o comando em outro // npx ng g c shared/components/header
3- vincular o componente no app.component.ts // no arquivo do componente criado, ir no nome do export class, copiar e colar dentro do arquivo app.component.ts na parte do "imports"
4- inserir no app.component.html o meu header component
5- instalar extensao oficial do Angular: Angular Language Service
6- importar o MatToolbarModule no header.component.ts
7- criar componente de listagem e adicionar direto na rota (o nome do componente de rota que se usa e <router-outlet>) // dentro deste Componente eh onde vou realizar as chamadas da API para requisicoes http

*todo componente e renderizado a partir do app.component.ts, sendo assim precso inseri-lo no app.component.hmtl

BACKEND: JSON Server
fake backend (API) para consumir requisicoes https
*criar arquivo db.json na pasta raiz e criar um json com o conteudo
1- npm i -D json-server
2- rodar: npx json-server db.json (vai abrir um localhost com json)
3- no ListComponent vou consumir este json
4- inserir o httpClient provider no app.config.ts
5- criar um proxy para mapear a rota do endpoint (onde estiver '/api' vai ser rediredionado para o localhost:3000 que vem do json-server; caso nao fizer este redirecionamento, vai ser direcionado para a porta 4200 do servidor do angular) '/api/products' // na pasta raiz criar proxy.json.config e configurar a rota desejada
6- no angular.json, no "serve" inserir "options" com o proxyConfig

*extensao para usar no View template (e um html que renderiza conteudo dinamicamnete, ou seja, que vem do backend): Angular control flow snippets

Refatoracao:
1- inserir a chamada da API (ngOnInit() - arquivo list.component.ts) em um arquivo separado para trabalhar com as requisicoes http (Get/Post/Delete/Put)
2- criar componente de servico: npx ng g s shared/services/products
3- injetar o getAll tipando o retorno da requisicao, no caso o json do products (id, title) usando um interface
4- aqui neste serviço é onde fica os verbos http

**Estilizacao: posso utilizar o site do Angular Material e copiar o codigo de componetizacao
VS CODE identacao: CRTL + SHIFT + i

Componetizacao do card:
1- criar uma pasta dentro de features para guardar o card // qdo exportar o componente usar o input() que vai mandar um "signal" (product = input<Product>()) para recuperar no codigo html ({{ produc()?.title }})
2- na listagem do componente de card, por cause do car ser obrigatorio - "required" preciso de <app-card [product]="product"></app-card>

**extensao: Angular snippets

**Criar link de novo produto
1- adicionar tag <a> no list.component.html //consigo fazer requisicao para servido direto do html usando o angular snippets, neste cado o routerLink
*posso usar estilos como o bootstrap faz, com classes padronizadas o angular material
2- criar componente de criacao de produto que vai seu um componente de roteamento, como o list.component
3- vincular o componete ao roteamento
4- criar a funcionalidade de "lazy loading" do angular. Isto significa fazer o carregamento de rotas de forma separada (carregamento feito por demanda, so e chamado qdo clicar no botao de link) - conceito de SPA (single page application)

**Criar form dentro de create component
1- usar diretiva FormGroup (dentro do export class CreateComponent)
2- usar FormField do angular material (dentro do create.component.html)

**criar endpoint para p Post
1- metodo post exige um payload como parametro
2- funcionalidade do typescript: OMIT - serve para gerenciar quais propriedades vou precisar usar do payload por exemplo, um ID que não e necessario enviar na request: Omit<Product, 'id' | 'title'> // neste formato vou omitir ambos id e title da interface Product // precisa ser gerenciado por uma interface a parte
3- tipar o metodo post - tipo ProductPayload
4- no create.componente injetar o ProductService para usar o metodo post e passar no input do onSubmit, e gerenciar o retorno da request pelo subscribe()
5- visualizar retorno 200 no devtools, aba network, fetch/XHR - xml httpRequest
6- quando salvar dados no input da tela, vai salvar o conteuno do db.json

**diferença de interface e type: o interface é estensível, ou seja, posso adicionar propriedades. Já o type não pode ser extendido, ou seja, não posso adicionar propriedades depois de criado:
EX:
interface BirdInterface {
  wings: 2;
}
interface BirdInterface {
  beak: string;
}

type BirdType = {
  wings: 2;
};
// Error: Duplicate identifier 'BirdType'.
type BirdType = {
  beak: string;
};

**criar feedaback ao usuario (material snack-bar) e retornar para tela anterior
2- importar o snack-bar no create.component (MatSnackBar)
3- para rotear a pagina de volta a pagina inicial, injetar o serviço de Router // ele tem a propriedade "NavigateByUrl" que retorna uma promise (posso usar o catch)

**criar snack-bar default
1- criar um objeto dentro do app.config (abaixo do provideHttpClient()), este por sinal é usado pelo bootstrap, colocar o objeto dentro de uma variavel const
2- não esquecer de importar o mat-snack-bar config, options e o ValueProvider
3- tirar o objeto do matSnackBar.open do create.component

**criar editar produto
1- criar componente de edição: features/edit
2- adicionar rota para o editar produto
3- injetar o router e o click do editar dentro do ListComponent
4- inserir evento (edit) no <app-card></app-card> e o evento (click) no botao do card.component.hmtl, ambos com o mesmo nome de metodo onEdit()
*dumb component: renderizam conteudo, recebem conteudo e retornam conteudo via input de forma simples // usa o @Output para isso 

*verbo http PATCH posso somente editar uma propriedade de um objeto, enquanto o verbo http PUT preciso alterar o objeto todo

5- copiar o from e os imports do CreateComponent para o EditComponent
6- criar rota do PUT, inserir :id na rota do editar-produto // podemos recuperar o objeto produto que quero diretamente usando o RESOLVER
7- importar o Observable from 'rxjs'

*extendao TabNine para oferecer sugestoes, auto-complete, etc

*ListComponent é um 'smart component', pois ele gerencia dados que são usados em rotamentos, chamadas de API, etc, enquanto o @Output é um 'dumb component' pois somente manipula input/output de dados. Sempre que tem um smart component vai ter um dumb component

**buscar produto por ID e editar seu conteudo
1- posso passar o produto todo como parametro dentro da listagem de cards, pois dentro do @for existe o produto (não preciso passar o produto pelo card pois ele é um dumb component, passamos parametro na view renderizada em um smart component, no caso o ListComponent)
2- para passar o id dentro da rota, posso usar o navigate ao inves do NavigateByUrl. No navigate passo array com a rota e o id
3- inserir servico get() para recuperar um produto
4- injetar o produto dentro do EditComponent com snapshot, para recuperar o title e preencher no input automaticamente ao clicar em editar //form = new FormGroup({
    title: new FormControl<string>(this.product.title,
      { nonNullable: true, validators: Validators.required})
  });

**refatorar: criar um componente de form para reutilizar no create e no edit
2- fazer o form receber o produto // usar  o input<>
3- remover todos imports do EditComponent e do CreateComponent, deixar só o FormComponent
4- inserir o <app-form></app-form> dentro do edit.component.html e do create.component.html, com seus devidos eventos e parametros
5- no editar o produto vem da rota injetada usando o snapshot()
6- para passar o proprio objeto como parametro no submit, usar o $event

**deletar um produto, mostrar modal confirmacao, deletar e atualizar lista no db.json
1- no componente card, a entrada de dados é o <input> e a saída é o @Output, pois ele é um dumb component
2- dentro do @for do card componente, posso escutar o evento de varias formas: (edit), (delete)
3- inserir model de confirmação: angular material Dialog
4- inserir outro @Component no ListComponent para o Dialog material, inserir o template e alterar nome do export class
* .pipe() serve como um condicional usndo o filter para avaliar a condição, se for true o proximo metodo e carregado.
EX: .pipe(filter((response) => response === true)).subscribe() // caso response seja true, o subscribe() é acionado
5- MatDialogRef usado para passar dados
6- fazer endpoint para deletar a lista: inserir no prodruct.service

**Criar serviço de dialog confirmation
1- extrair o componente e o ConfirmationDialogComponent de dialog do ListComponent para o novo servico de confirmacao do dialog //colar logo abaixo do import e antes do @Injectable
2- criar metodo de openDialog() e deixar o retorno um Observable: boolean, já que no ListComponent vou chamar este servico e o retorno boolean para usar o .pipe()
3- tirar a responsabilidade de deletar e atualiar a lista dentro do componente de dialog e deixar no ListComponent 
4- injetar o confirmationDialogService no ListComponent

**usar API de signals
1- carregar conteudo com Resolver e utilizar signals para substituir o ngOnInit do ListComponent (o signal facilita carregar pagina com conteudo alterado e evitar chamada ao servidor diretamente - "não pisca a tela quando deleto um produto por exemplo"). É como se fosse uma reação a alterar solicitada dentro do cliente. Antes tinha uma propriedade dentro de um array e depois tiha que computar tudo novamente, simplesmente há uma reação ao signal
2- inserir o resolve na rota
3- para criar a reação, usar o .set(), mudar no @for o objeto Product que agora é um signal (product())

**criar pasta para guardar os Resolvers que estão no roteamento
1- dentro do arquivo de resolve, inserir cada resolve exportanto como uma function

**inserir DeferBlock: renderiza componentes sobre demanda (fucnciona como uma chamada assincrona, cada componente fica na espera de sua chamada apra ser renderizada)
por exemplo, o @for sempre renderiza um card independente se tem ou nao produto cadastrado
1- criar componente para analisar se ha ou nao produto cadastrado
2- inserir o @empty como se fosse o else do @for
3- não esquecer de inserir no import do ListComponent o componente de no-items criado
4- para testar, por array vazio no signal:
products = signal<Product[]>(
    []
  );
5- inserir o @defer(on immediate) em cada card
6- para analisar, abrir devtools, no network em JS vai ter "chunks" e um deles mostra os componentes carregados ou naõ na tela, no caso se não houver produto cadastrado, vai carregar o no-items-component

*criar botao voltar para home
1- criar <a> no create.component.html
2- usar propriedade [routerLink]="['/']" na tag <a>
3- inseri o RouterLink dentro do imports do create.component.ts 

**RODAR FAKE DB:
npx json-server db.json
**RODAR PROJETO:
npm start