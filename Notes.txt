Usar um subsystem para rodar uma distro linux (tem na microsoft store) caso seja windows

instalar o nvm (node version manager): curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

seguir os passos: https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/

nvm -v
nvm ls-remote
nvm install v18.16.0

npx -p @angular/cli@17 ng new product-store --skip-tests
Y
stylesheet? Sass SCSS - Y
Server side? N

teminal: code <nome do projeto> para abrir no code, run npm start para iniciar o projeto

1- instalar Angular Material (material para componetizacao)
npx ng add @angular/material
2- criar componentes: posso deixar o server running em um terminal e rodar o comando em outro // npx ng g c shared/components/header
3- vincular o componente no app.component.ts // no arquivo do componente criado, ir no nome do export class, copiar e colar dentro do arquivo app.component.ts na parte do "imports"
4- inserir no app.component.html o meu header component
5- instalar extensao oficial do Angular: Angular Language Service
6- importar o MatToolbarModule no header.component.ts
7- criar componente de listagem e adicionar direto na rota (o nome do componente de rota que se usa e <router-outlet>) // dentro deste Componente eh onde vou realizar as chamadas da API para requisicoes http

*todo componente e renderizado a partir do app.component.ts, sendo assim precso inseri-lo no app.component.hmtl

BACKEND: JSON Server
fake backend (API) para consumir requisicoes https
*criar arquivo db.json na pasta raiz e criar um json com o conteudo
1- npm i -D json-server
2- rodar: npx json-server db.json (vai abrir um localhost com json)
3- no ListComponent vou consumir este json
4- inserir o httpClient provider no app.config.ts
5- criar um proxy para mapear a rota do endpoint (onde estiver '/api' vai ser rediredionado para o localhost:3000 que vem do json-server; caso nao fizer este redirecionamento, vai ser direcionado para a porta 4200 do servidor do angular) '/api/products' // na pasta raiza criar proxy.json.config e configurar a rota desejada
6- no angular.json, no "serve" inserir "options" com o proxyConfig

*extensao para usar no View template (e um html que renderiza conteudo dinamicamnete, ou seja, que vem do backend): Angular control flow snippets

Refatoracao:
1- inserir a chamada da API (ngOnInit() - arquivo list.component.ts) em um arquivo separado para trabalhar com as requisicoes http (Get/Post/Delete/Put)
2- criar componente de servico: npm ng g s shared/services/products
3- injetar o getAll tipando o retorno da requisicao, no caso o json do products (id, title) usando um interface

**Estilizacao: posso utilizar o site do Angular Material e copiar o codigo de componetizacao
VS CODE identacao: CRTL + SHIFT + id

Componetizacao do card:
1- criar uma pasta dentro de features para guardar o card // qdo exportar o componente usar o input() que vai mandar um "signal" (product = input<Product>()) para recuperar no codigo html ({{ produc()?.title }})
2- na listagem do componente de card, por cause do car ser obrigatorio - "required" preciso de <app-card [product]="product"></app-card>

**extensao: Angular snippets

**Criar link de novo produto
1- adicionar tag <a> no list.component.html //consigo fazer requisicao para servido direto do html usando o angular snippets, neste cado o routerLink
*posso usar estilos como o bootstrap faz, com classes padronizadas o angular material
2- criar componente de criacao de produto que vai seu um componente de roteamento, como o list.component
3- vincular o componete ao roteamento
4- criar a funcionalidade de "lazy loading" do angular. Isto significa fazer o carregamento de rotas de forma separada (carregamento feito por demanda, so e chamado qdo clicar no botao de link) 

**Criar form dentro de create component
1- usar diretiva FormGroup (dentro do export class CreateComponent)
2- usar FormField do angular material (dentro do create.component.html)